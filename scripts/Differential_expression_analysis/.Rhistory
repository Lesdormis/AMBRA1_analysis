if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("JASPAR2020")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TFBSTools")
library(TFBSTools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db")
library(TFBSTools)
library(JASPAR2020)
pfm = getMatrixByID(JASPAR2020, ID = "MA1515.1")
jaspar <- function (collection = "CORE", ...)
{
opts <- list()
opts["tax_group"] <- "vertebrates"
opts["collection"] <- collection
opts <- c(opts, list(...))
out <- TFBSTools::getMatrixSet(JASPAR2020::JASPAR2020, opts)
if (!isTRUE(all.equal(TFBSTools::name(out), names(out))))
names(out) <- paste(names(out), TFBSTools::name(out),
sep = "_")
return(out)
}
motifs_JASPAR2020 <- jaspar()
save(motifs_JASPAR2020, file = "jaspar2020.Robj")
install.packages("Seurat")
library(JASPAR2020)
library(TFBSTools)
options(stringsAsFactors = F)
tmp.means = read.csv("Z-score-mean_deviation_matrix_jaspar2020.csv",row.names = 1)
head(tmp.means)
dir.create("Jaspar_LOGO")
setwd("Jaspar_LOGO/")
tf_all = rownames(tmp.means)
for (i in 1:length(tf_all)) {
id_tmp = sapply(strsplit(tf_all[i],"_"),"[",1)
tf_name = sapply(strsplit(tf_all[i],"_"),"[",2)
pfm = getMatrixByID(JASPAR2018, ID = id_tmp)
png(paste0(tf_name,".png"))
seqLogo(toICM(pfm))
dev.off()
}
dir.create("Jaspar_LOGO")
setwd("Jaspar_LOGO/")
tf_all = rownames(tmp.means)
for (i in 1:length(tf_all)) {
id_tmp = sapply(strsplit(tf_all[i],"_"),"[",1)
tf_name = sapply(strsplit(tf_all[i],"_"),"[",2)
pfm = getMatrixByID(JASPAR2020, ID = id_tmp)
png(paste0(tf_name,".png"))
seqLogo(toICM(pfm))
dev.off()
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages("openxlsx")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(ggplot2);library(ggpubr)
options(stringsAsFactors = F)
expression <- read.csv("../CCLE_expression.csv",row.names = 1,check.names = F)
gene = colnames(expression)
#gene[grepl("AMBRA1",gene)] "AMBRA1 (55626)"
cell_line = rownames(expression) # 1305
auc = read.csv("secondary-screen-dose-response-curve-parameters.csv")
compound_name = unique(auc$name) # 1448
auc_cell = unique(auc$depmap_id) # 481
sub_expression = expression[auc_cell, ]
lg(1967)
log10(1967)
options(stringsAsFactors = F)
df = read.csv("fifa.csv")
str(df)
dim(df)
library(ggplot2)
library(ggpubr)
options(stringsAsFactors = F)
load("TCGA_PAN_FPKM_UQ_CNV_RPPA.Robj")
cor_table = data.frame()
plot_temp = subset(mg_temp, cohort == "TCGA-LUAD")
# load LUAD KRAS G12 mutation
kras = read.csv("TGCA_KRAS_G12_mutation.csv")
kras_bar = unique(kras$barcode)
kras_plot = plot_temp[plot_temp$barcode %in% kras_bar,] # 56
head(plot_temp)
gp <- ggscatter(kras_plot, x = "AMBRA1_neg", y = "CYCLIND1",
add = "reg.line",
conf.int = T,
add.params = list(color = "blue",
fill = "lightgray"), title = paste("TCGA","LUAD KRAS G12 Mutation")) +
stat_cor(method = "pearson")
gp
gp <- ggscatter(kras_plot, x = "AMBRA1_poi", y = "CYCLIND1",
add = "reg.line",
conf.int = T,
add.params = list(color = "blue",
fill = "lightgray"), title = paste("TCGA","LUAD KRAS G12 Mutation")) +
stat_cor(method = "pearson")
gp
gp <- ggscatter(kras_plot, x = "AMBRA1_lm", y = "CYCLIND1",
add = "reg.line",
conf.int = T,
add.params = list(color = "blue",
fill = "lightgray"), title = paste("TCGA","LUAD KRAS G12 Mutation")) +
stat_cor(method = "pearson")
gp
library(ggplot2)
library(reshape2)
library(tidyverse)
load("AMBRA1_TCGA_PAN_CNV_gistic_cBio.Robj") # 10283
table(cnv_pan$AMBRA1)
coh_df = as.data.frame(table(cnv_pan$cohort))
colnames(coh_df) = c("cohort","num")
cnv_pan$deletion = ifelse(cnv_pan$AMBRA1 == -2, "deep_deletion",
ifelse(cnv_pan$AMBRA1 == -1, "shallow_deletion", "others"))
cnv_pan$deletion = factor(cnv_pan$deletion, levels = c("deep_deletion","shallow_deletion","others"))
dele_df = cnv_pan[,c("cohort","deletion")]
# remove others
dele_df = subset(dele_df, deletion != "others")
dele_df = dcast(dele_df, cohort ~ deletion)
dele_df = melt(dele_df)
df = merge(dele_df, coh_df, by = "cohort")
df$percentage = df$value/df$num * 100
dele_df = df
ord_df = subset(dele_df, variable == "deep_deletion")
ord_df = ord_df[order(ord_df$percentage,decreasing = T),]
ord = ord_df$cohort
dele_df$cohort = factor(dele_df$cohort, levels = ord)
dele_df
write.csv(dele_df, file = "percentage_bar_chart_deletion_table.csv",row.names = F)
sessionInfo()
library(ISLR)
library(MASS)
fix(Boston)
?fix
colnames(Boston)
lm.fit = lm(medv ~ lstat,data = Boston)
summary(lm.fit)
attach(Boston)
plot(medv, lstat)
abline(lm.fit)
?par
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
par(mfrow = c(2,2))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
library(car)
# compute all variables to see which one is significant
lm.fit = lm(medv~)
# compute all variables to see which one is significant
lm.fit = lm(medv~,data = Boston)
# compute all variables to see which one is significant
lm.fit = lm(medv~.,data = Boston)
summary(lm.fit)
library(car)
vif(lm.fit)
summary(lm(medv~lstat*age))
# create a polunomial formula
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
summary(lm.fit2)
?I
# create a polunomial formula
lm.fit2 = lm(medv ~ lstat + lstat^2)
summary(lm.fit2)
lm.fit = lm(medv ~ lstat)
anova(lm.fit, lm,fit2)
lm.fit = lm(medv ~ lstat)
anova(lm.fit, lm.fit2)
lm.fit = lm(medv ~ lstat)
summary(anova(lm.fit, lm.fit2))
?anova
anova(lm.fit, lm.fit2)
# create a polunomial formula
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
# The function I here has specialy usage to inhibit the interpretation of operators
summary(lm.fit2)
lm.fit = lm(medv ~ lstat)
anova(lm.fit, lm.fit2)
lm.fit5 = lm(medv ~ poly(lstat,5))
summary(lm.fit5)
anova(lm.fit2, lm.fit5)
lm.fit4 = lm(medv~poly(lstat,4))
anova(lm.fit4,lm.fit5)
full.lm = lm(medv~.)
full.lm = lm(medv~.,data = Boston)
step.model = stepAIC(full.lm, direction = "both")
step.model = stepAIC(full.lm, direction = "both",trace = F)
summary(step.model)
install.packages("leaps")
require(ISLR)
data(Auto)
pairs(Auto)
cor(subset(Auto, select=-name))
fit.lm <- lm(mpg~.-name, data=Auto)
summary(fit.lm)
par(mfrow=c(2,2))
plot(fit.lm)
library(ISLR)
View(df)
colnames(Smarket)
dim(Smarket)
summary(Smarket)
attach(Smarket)
plot(Volume)
get(Smarket)
Smarket = Smarket
View(Smarket)
cor(Smarket[,-9])
plot(Volume)
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,data = Smarket, family = binomial)
summary(glm.fit)
?predict
predict(glm.fit)
predict(glm.fit,type = "response")
glm.probe = predict(glm.fit,type = "response")
contrasts(glm.fit)
contrasts(Direction)
glm.pred[glm.probe>0.5] = "Up"
glm.pred[glm.probe>0.5] = "Up"
glm.pred = rep("Down",1250)
glm.pred[glm.probe>0.5] = "Up"
table(glm.pred, Direction)
1- mean(glm.pred == Direction)
train = (Year ã€Š2005)
train = (Year<2005)
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.fits = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family = binomial, subset = train)
glm.probe = predict(glm.fits,Smarket.2005,type = "response")
glm.pred[glm.probe>.5]="Up"
table(glm.pred,Direction.2005)
glm.pred = rep("Down",252)
glm.pred[glm.probe>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred!=Direction.2005)
1 - mean(glm.pred!=Direction.2005)
mean(glm.pred != Direction)
mean(glm.pred!=Direction.2005)
sum(train)
?glm
glm.fits = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = train)
glm.probs = predict(glm.fits,Smarket.2005,type = "response")
glm.pred = rep("Down",252);glm.pred[glm.probs>.5]="Up"
mean(glm.pred!=Direction.2005)
glm.fits = glm(Direction~Lag1+Lag2+Volume, data = Smarket, family = binomial, subset = train)
glm.probs = predict(glm.fits,Smarket.2005,type = "response")
glm.pred = rep("Down",252);glm.pred[glm.probs>.5]="Up"
mean(glm.pred!=Direction.2005)
library(MASS)
library(MASS)
lda.fit = lda(Direction ~ Lag1+Lag2, data = Smarket,subset = train)
lda.fit
plot(lda.fit)
lda.pred = predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.pred$x
lda.class = lda.pred$class
lda.class = lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class!=Direction.2005)
lda.pred$posterior
sum(lda.pred$posterior[,"Up"]>.9)
qda.fit = qda(Direction~Lag1+Lag2, data = Smarket,subset = train)
qda.fit
qda.class = predict(qda.fit, Smarket.2005)$class
table(qda.class, Direction.2005)
mean(qda.class!=Direction.2005)
set.seed(1)
knn.pred = knn(train.x,tes.x,train.Direction,k=1)
library(class)
train.x = cbind(Lag1,Lag2)[train,]
test.x = cbind(Lag1,Lag2)[!train,]
train.Direction = Direction[train]
set.seed(1)
knn.pred = knn(train.x,tes.x,train.Direction,k=1)
set.seed(1)
knn.pred = knn(train.x,test.x,train.Direction,k=1)
mean(knn.pred!=Direction.2005)
kv =c()
for (k in 1:10) {
knn.pred = knn(train.x,test.x,train.Direction,k=k)
kc = mean(knn.pred!=Direction.2005)
kv = c(kv,kc)
}
max(kv)
kv =list()
for (k in 1:10) {
knn.pred = knn(train.x,test.x,train.Direction,k=k)
kc = mean(knn.pred!=Direction.2005)
kv[[k]] = kc
}
max(kv)
kv
# library(devtools)
# install_github("miccec/yaGST")
library(yaGST)
library(doParallel)
library(pheatmap)
load("TCGA_DLBC_fpkm_counts.Robj")
exprData <- t(fpkm_count)
ambra_del <- "TCGA-FF-A7CX"; ambra_mut <- c("TCGA-FA-A86F","TCGA-FF-8041")
ccnd3_mut <- "TCGA-GS-A9TU"; ccnd3_amp <- c("TCGA-GS-A9TQ", "TCGA-GS-A9TY")
# cl <- makePSOCKcluster(3)
# clusterApply(cl, floor(runif(length(cl), max = 10000000)), set.seed)
# registerDoParallel(cl)
ans_eeMWW <- eeMWW(exprData, c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp))
#save(ans_eeMWW, file = "TCGA_AMBRA1_CCND3_mut3_WMM.Robj")
int_gene <- c(head(names(ans_eeMWW),n = 150), tail(names(ans_eeMWW),n=150))
palette <- 200
cell_colors = colorRampPalette(c("#043177", "#244B88", "#FAFAFA", "#C62E2E", "#BF0F0F"))(palette)
hp_df <- fpkm_count[int_gene,]
all_sampe <- colnames(fpkm_count); rest_sample <- all_sampe[!all_sampe %in% c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rb1_del,cdk4_amp,cdk6_amp)]
annotate_col <- data.frame(sample = rep(c("AMBRA1_Dele","AMBRA1_Mut","CCND3_Mut","CCND3_Amp","rest_samples"),c(1,2,1,2,length(rest_sample))))
rownames(annotate_col) <- c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rest_sample)
color_annotation = list(sample = c(AMBRA1_Dele = "red",AMBRA1_Mut = "purple",CCND3_Mut = "blue",CCND3_Amp = "green",rest_samples = "white"))
hp_df_log <- log2(hp_df + 0.01) #add pesudocount
hp_df_log_z <- scale(t(hp_df_log))
hp_df_log_z <- t(hp_df_log_z)
hp_df_log_z <- as.data.frame(hp_df_log_z)
hp_df_log_z_fix <- FixScale(mydata = hp_df_log_z, min = -2.5, max = 2.5)
ph <- pheatmap(hp_df_log_z_fix, color = cell_colors, cluster_rows = F, cluster_cols = T,
border_color = NA, fontsize_row = 1.2, fontsize_col = 1,
fontsize = 8, show_rownames =T,show_colnames = F, scale = "none",
annotation_col = annotate_col,annotation_colors = color_annotation[1],filename = paste0("TCGA_Heatmap_MUT_AMBRA1_CCND3_MWW_top",150,".pdf"))
# get the heatmap order
ord <- ph$tree_col$order
hp_df <- hp_df[,ord]
write.csv(hp_df, file = "heatmap_gene_signatures_FPKM_matrix.csv", row.names = T)
setwd("~/git_trial/scripts/Differential_expression_analysis")
# library(devtools)
# install_github("miccec/yaGST")
library(yaGST)
library(doParallel)
library(pheatmap)
load("TCGA_DLBC_fpkm_counts.Robj")
exprData <- t(fpkm_count)
ambra_del <- "TCGA-FF-A7CX"; ambra_mut <- c("TCGA-FA-A86F","TCGA-FF-8041")
ccnd3_mut <- "TCGA-GS-A9TU"; ccnd3_amp <- c("TCGA-GS-A9TQ", "TCGA-GS-A9TY")
# cl <- makePSOCKcluster(3)
# clusterApply(cl, floor(runif(length(cl), max = 10000000)), set.seed)
# registerDoParallel(cl)
ans_eeMWW <- eeMWW(exprData, c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp))
#save(ans_eeMWW, file = "TCGA_AMBRA1_CCND3_mut3_WMM.Robj")
int_gene <- c(head(names(ans_eeMWW),n = 150), tail(names(ans_eeMWW),n=150))
palette <- 200
cell_colors = colorRampPalette(c("#043177", "#244B88", "#FAFAFA", "#C62E2E", "#BF0F0F"))(palette)
hp_df <- fpkm_count[int_gene,]
all_sampe <- colnames(fpkm_count); rest_sample <- all_sampe[!all_sampe %in% c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rb1_del,cdk4_amp,cdk6_amp)]
annotate_col <- data.frame(sample = rep(c("AMBRA1_Dele","AMBRA1_Mut","CCND3_Mut","CCND3_Amp","rest_samples"),c(1,2,1,2,length(rest_sample))))
rownames(annotate_col) <- c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rest_sample)
color_annotation = list(sample = c(AMBRA1_Dele = "red",AMBRA1_Mut = "purple",CCND3_Mut = "blue",CCND3_Amp = "green",rest_samples = "white"))
hp_df_log <- log2(hp_df + 0.01) #add pesudocount
hp_df_log_z <- scale(t(hp_df_log))
hp_df_log_z <- t(hp_df_log_z)
hp_df_log_z <- as.data.frame(hp_df_log_z)
hp_df_log_z_fix <- FixScale(mydata = hp_df_log_z, min = -2.5, max = 2.5)
ph <- pheatmap(hp_df_log_z_fix, color = cell_colors, cluster_rows = F, cluster_cols = T,
border_color = NA, fontsize_row = 1.2, fontsize_col = 1,
fontsize = 8, show_rownames =T,show_colnames = F, scale = "none",
annotation_col = annotate_col,annotation_colors = color_annotation[1],filename = paste0("TCGA_Heatmap_MUT_AMBRA1_CCND3_MWW_top",150,".pdf"))
# get the heatmap order
ord <- ph$tree_col$order
hp_df <- hp_df[,ord]
write.csv(hp_df, file = "heatmap_gene_signatures_FPKM_matrix.csv", row.names = T)
library(devtools)
install_github("miccec/yaGST")
library(yaGST)
library(doParallel)
library(pheatmap)
load("TCGA_DLBC_fpkm_counts.Robj")
exprData <- t(fpkm_count)
ambra_del <- "TCGA-FF-A7CX"; ambra_mut <- c("TCGA-FA-A86F","TCGA-FF-8041")
ccnd3_mut <- "TCGA-GS-A9TU"; ccnd3_amp <- c("TCGA-GS-A9TQ", "TCGA-GS-A9TY")
# cl <- makePSOCKcluster(3)
# clusterApply(cl, floor(runif(length(cl), max = 10000000)), set.seed)
# registerDoParallel(cl)
ans_eeMWW <- eeMWW(exprData, c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp))
#save(ans_eeMWW, file = "TCGA_AMBRA1_CCND3_mut3_WMM.Robj")
int_gene <- c(head(names(ans_eeMWW),n = 150), tail(names(ans_eeMWW),n=150))
palette <- 200
cell_colors = colorRampPalette(c("#043177", "#244B88", "#FAFAFA", "#C62E2E", "#BF0F0F"))(palette)
hp_df <- fpkm_count[int_gene,]
all_sampe <- colnames(fpkm_count); rest_sample <- all_sampe[!all_sampe %in% c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rb1_del,cdk4_amp,cdk6_amp)]
annotate_col <- data.frame(sample = rep(c("AMBRA1_Dele","AMBRA1_Mut","CCND3_Mut","CCND3_Amp","rest_samples"),c(1,2,1,2,length(rest_sample))))
rownames(annotate_col) <- c(ambra_del,ambra_mut,ccnd3_mut,ccnd3_amp,rest_sample)
color_annotation = list(sample = c(AMBRA1_Dele = "red",AMBRA1_Mut = "purple",CCND3_Mut = "blue",CCND3_Amp = "green",rest_samples = "white"))
hp_df_log <- log2(hp_df + 0.01) #add pesudocount
hp_df_log_z <- scale(t(hp_df_log))
hp_df_log_z <- t(hp_df_log_z)
hp_df_log_z <- as.data.frame(hp_df_log_z)
hp_df_log_z_fix <- FixScale(mydata = hp_df_log_z, min = -2.5, max = 2.5)
ph <- pheatmap(hp_df_log_z_fix, color = cell_colors, cluster_rows = F, cluster_cols = T,
border_color = NA, fontsize_row = 1.2, fontsize_col = 1,
fontsize = 8, show_rownames =T,show_colnames = F, scale = "none",
annotation_col = annotate_col,annotation_colors = color_annotation[1],filename = paste0("TCGA_Heatmap_MUT_AMBRA1_CCND3_MWW_top",150,".pdf"))
# get the heatmap order
ord <- ph$tree_col$order
hp_df <- hp_df[,ord]
write.csv(hp_df, file = "heatmap_gene_signatures_FPKM_matrix.csv", row.names = T)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
options(stringsAsFactors = F)
lenz <- read.csv("Lenz_surv.csv")
stank <- read.csv("Stanke_surv.csv")
# scale each expression on each cohort
lenz$AMBRA1 <- scale(lenz$AMBRA1)
stank$AMBRA1 <- scale(stank$AMBRA1)
cn <- c("GEO_ID","Surv_status","surv_years","AMBRA1")
colnames(stank) <- cn; colnames(lenz) <- cn
pdf("AMBRA1_surv_plot_comb_ind.pdf")
q = 0.1
# lenz
qua = quantile(lenz[,"AMBRA1"],c(q,1-q))
df <- lenz
df$rna <- ifelse(df[4] >= qua[[2]], "high",ifelse(df[4] <= qua[[1]],"low","med"))
df = subset(df, rna != "med")
df$rna <- as.character(df$rna)
print(table(df$rna))
lenz_q <- df
# stank
qua = quantile(stank[,"AMBRA1"],c(q,1-q))
df <- stank
df$rna <- ifelse(df[4] >= qua[[2]], "high",ifelse(df[4] <= qua[[1]],"low","med"))
df = subset(df, rna != "med")
df$rna <- as.character(df$rna)
print(table(df$rna))
stank_q <- df
# combine
df <- rbind(lenz_q, stank_q)
print(table(df$rna))
surv_t <- Surv(df$surv_years, df$Surv_status)
fit_t <- survfit(surv_t ~ rna , data = df)
pg.1 = ggsurvplot(fit_t, pval = T,title=colnames(df)[2])
pp.1 = pg.1$plot
pp.1 = pp.1 + labs(subtitle = paste("quantile",q,1-q))
print(pp.1)
dev.off()
gc()
